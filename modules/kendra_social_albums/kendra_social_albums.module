<?php

include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'kendra_social_albums') . '/kendra_social_albums.callbacks.inc';

function _kendra_social_albums_fetch_user_rel($boxid, $uid) {
	$query = new EntityFieldQuery();
	$res = $query->entityCondition('entity_type', 'relation')
	  ->entityCondition('bundle', 'album_user')
	  ->fieldCondition('endpoints', 'entity_id', $boxid, '=')
	  ->fieldCondition('endpoints', 'entity_id', $uid, '=')
	  ->execute();
	$relation = array_shift($res['relation']);
	return relation_load($relation->rid);
}

function _kendra_social_albums_delete_user_rel($boxid, $uid) {
  $query = new EntityFieldQuery();
  $res = $query->entityCondition('entity_type', 'relation')
    ->entityCondition('bundle', 'album_user')
    ->fieldCondition('endpoints', 'entity_id', $boxid, '=')
    ->fieldCondition('endpoints', 'entity_id', $uid, '=')
    ->execute();
  $relation = array_shift($res['relation']);
  relation_delete($relation->rid);
}


function _kendra_social_albums_permission_check() {
	watchdog('p', '<pre>' . print_r(func_get_args(), TRUE) . '</pre>');
}

// TODO: more restricted access control
function _kendra_social_album_access_check($op, $box, $account) {
  if ($op == 'view') {
    return TRUE;
  }
  if ($op == 'edit') {
    if ($box->uid == $account->uid) {
      return TRUE;
    }
    // is Friend in box global permission
    $friends = field_get_items('node', $box, 'field_album_friends');
    if (!empty($friends[0]['value']) && strstr($friends[0]['value'], 'W')) {
      return TRUE;
    }
    $query = new EntityFieldQuery();
    $albums = $query->entityCondition('entity_type', 'relation')
      ->entityCondition('bundle', 'album_user')
      ->fieldCondition('endpoints', 'entity_id', $box->nid, '=')
      ->fieldCondition('endpoints', 'entity_id', $account->uid, '=')
      ->execute();
    $relation = array_shift($albums['relation']);
    $relation = relation_load($relation->rid);
    foreach ($relation->field_album_perm['und'] as $perm) {
      $perms[] = $perm['value'];
    }
    if (in_array('edit', $perms)) {
      return TRUE;
    }
  }
  return FALSE;
}
function _kendra_social_albums_delete_item($box, $data) {
  $box = node_load($box);
  if (isset($data['item']) && isset($box->nid)) {
	  global $user;
	  // TODO: fix
	  //if ($user->uid == 27) {
		//  return array($user->uid == $box->uid, $box, $data, $user);
	  //}
    //if (_kendra_social_album_access_check('edit', $box, $user)) {
	  //  return array('status' => 'error', 'message' => 'permission denied');
		//}
    $media = _kendra_saracen_trial_mod_lookup_id($data['item']);
    if (empty($media)) {
	    //return array('status' => 'error', 'message' => 'invalid media item ID');
	    return services_error('Invalid media item ID', 404);
    }
    $query = new EntityFieldQuery();
    $res = $query->entityCondition('entity_type', 'relation')
      ->entityCondition('bundle', 'album_contains')
      ->fieldCondition('endpoints', 'entity_id', $box->nid, '=')
      ->fieldCondition('endpoints', 'entity_id', $media, '=')
      ->execute();
    $relation = array_shift($res['relation']);

    if (isset($relation->rid)) {
      relation_delete($relation->rid);
      return array('status' => 'ok', 'message' => 'item deleted from box');
    } else {
      //return array('status' => 'error', 'message' => 'no matching item found in album');
      return services_error('No item found in box',404);
    }

  } else {
    //return array('status' => 'error', 'message' => 'a box ID and item ID is required');
    return services_error('A box ID and item ID is required',400);
  }
}

//function kendra_social_albums_services_resources() {}
